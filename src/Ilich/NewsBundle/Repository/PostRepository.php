<?php

namespace Ilich\NewsBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{

    /**
     * get all posts
     * @param type $offset
     * @param type $limit
     * @return type
     */
    public function getPosts($offset, $limit) 
    {
        return $this->getEntityManager()
                        ->createQuery("SELECT p, c "
                                . "FROM IlichNewsBundle:Post p "
                                . "LEFT JOIN p.categories c "
                                . "WHERE p.enabled = true "
                                . "AND p.postedAt < CURRENT_TIMESTAMP() "
                                . "ORDER BY p.createdAt DESC "
                        )
                        ->setFirstResult((int)$offset)
                        ->getResult();
    }
    public function getLastPosts($offset, $limit = 3) 
    {
        return $this->getEntityManager()
                        ->createQuery("SELECT p "
                                . "FROM IlichNewsBundle:Post p "
                                . "WHERE p.enabled = true "
                                . "AND p.postedAt < CURRENT_TIMESTAMP() "
                                . "ORDER BY p.createdAt DESC "
                        )
                        ->setFirstResult((int)$offset)
                        ->setMaxResults($limit)
                        ->getResult();
    }
    /**
     * get posts by tag
     * @param type $tag
     * @return type
     */
    public function getPostsByTag($tagId) {
        return $this->getEntityManager()
                        ->createQuery("SELECT p, c "
                                . "FROM IlichNewsBundle:Post p "
                                . "LEFT JOIN p.tags c "
                                . "WHERE p.enabled = true "
                                . "AND p.postedAt < CURRENT_TIMESTAMP() "
                                . "AND c.id = :id "
                                . "ORDER BY p.createdAt DESC "
                        )->setParameter('id', $tagId);
    }
    
    /**
     * get posts by categry
     * @param type $category
     * @return type
     */
    public function getPostsByCategory($category) {
        return $this->getEntityManager()
                        ->createQuery("SELECT p, c "
                                . "FROM IlichNewsBundle:Post p "
                                . "LEFT JOIN p.categories c "
                                . "WHERE p.enabled = true "
                                . "AND p.postedAt < CURRENT_TIMESTAMP() "
                                . "AND c.slug = :slug "
                                . "ORDER BY p.createdAt DESC "
                        )->setParameter('slug', $category);
    }

    /**
     * get new post by field specnews
     * @return type
     */
    public function getNewPostBySpec()
    {
        return $this->getEntityManager()
            ->createQuery("SELECT p, c "
                . "FROM IlichNewsBundle:Post p "
                . "LEFT JOIN p.categories c "
                . "WHERE p.specnews = true "
                . "ORDER BY p.postedAt DESC "
            )
            ->setFirstResult(0)->setMaxResults(1)->getResult();
    }
    
    /**
     * Get similar posts
     * @param int $postId
     * @param obj $tags
     * @param int $amount
     * 
     * @return type
     */
    public function getSimilarPosts($postId, $tags, $amount = 4)
    {                
        return $this->getEntityManager()
            ->createQuery("SELECT p, count(p.id) AS HIDDEN somecount "
                . "FROM IlichNewsBundle:Post p "
                . "JOIN p.tags t "
                . "WHERE t.id IN (:tags) "
                . "AND p.id != :postId "
                . "GROUP BY p.id "
                . "ORDER BY somecount DESC, p.createdAt DESC "
            )
            ->setParameter('postId', $postId)
            ->setParameter('tags', $tags)
            ->setFirstResult(0)
            ->setMaxResults((int)$amount)
            ->getResult();
    }
    
    public function searchPosts($keywords){
        $query = 'SELECT p '
                . 'FROM IlichNewsBundle:Post p '
                . "WHERE ";
    
        foreach($keywords as $i => $key){
            $query .= "LOWER(p.title) LIKE CONCAT('%',:keywords$i,'%') "
             . "OR LOWER(p.content) LIKE CONCAT('%',:keywords$i,'%') OR ";
        }
        $query = substr($query, 0, strlen($query) - 4);
        $q = $this->getEntityManager()->createQuery($query);

        foreach ($keywords as $i => $key){
                $q->setParameter('keywords'.$i , $key);
        }
        
        return $q->setFirstResult(0)
            ->setMaxResults(20)
            ->getResult();
    }

}